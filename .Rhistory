y = 'Tarifa promedio')
# Hay "zonas premium" donde la tarifa valga más?
taxis |>
group_by(PUZone) |>
summarise(promedio_tarifa = median(total_amount), viajes = n()) |>
filter(viajes > 50) |>
mutate(rango_tarifa = case_when(
promedio_tarifa < 15.25 ~ "Mas baratas",
promedio_tarifa >= 35 ~ "Mas caras")) |>
filter(rango_tarifa %in% c('Mas baratas', 'Mas caras')) |>
ggplot() +
geom_col(aes(x = fct_reorder(PUZone, desc(promedio_tarifa)),
y = promedio_tarifa,
fill = promedio_tarifa),
na.rm = T, show.legend = F)+
geom_vline(xintercept = 5.5, linetype = "dashed", size = 0.75, color = 'black') +
scale_fill_gradientn(colors = c('orange', "red"))+
coord_flip()+
labs(title = 'Zonas más caras y más baratas para pedir un taxi',
x = '',
y = 'Tarifa promedio')+
dark_mode()
# Hay "zonas premium" donde la tarifa valga más?
taxis |>
group_by(PUZone) |>
summarise(promedio_tarifa = median(total_amount), viajes = n()) |>
filter(viajes > 50) |>
mutate(rango_tarifa = case_when(
promedio_tarifa < 15.25 ~ "Mas baratas",
promedio_tarifa >= 35 ~ "Mas caras")) |>
filter(rango_tarifa %in% c('Mas baratas', 'Mas caras')) |>
ggplot() +
geom_col(aes(x = fct_reorder(PUZone, desc(promedio_tarifa)),
y = promedio_tarifa,
fill = promedio_tarifa),
na.rm = T, show.legend = F)+
geom_vline(xintercept = 5.5, linetype = "dashed", size = 0.75) +
scale_fill_gradientn(colors = c('orange', "red"))+
coord_flip()+
labs(title = 'Zonas más caras y más baratas para pedir un taxi',
x = '',
y = 'Tarifa promedio')+
dark_mode()
# Hay "zonas premium" donde la tarifa valga más?
taxis |>
group_by(PUZone) |>
summarise(promedio_tarifa = median(total_amount), viajes = n()) |>
filter(viajes > 50) |>
mutate(rango_tarifa = case_when(
promedio_tarifa < 15.25 ~ "Mas baratas",
promedio_tarifa >= 35 ~ "Mas caras")) |>
filter(rango_tarifa %in% c('Mas baratas', 'Mas caras')) |>
ggplot() +
geom_col(aes(x = fct_reorder(PUZone, desc(promedio_tarifa)),
y = promedio_tarifa,
fill = promedio_tarifa),
na.rm = T, show.legend = F)+
geom_vline(xintercept = 5.5, linetype = "dashed", size = 0.75) +
scale_fill_gradientn(colors = c('green', "red"))+
coord_flip()+
labs(title = 'Zonas más caras y más baratas para pedir un taxi',
x = '',
y = 'Tarifa promedio')+
dark_mode()
# Hay "zonas premium" donde la tarifa valga más?
taxis |>
group_by(PUZone) |>
summarise(promedio_tarifa = median(total_amount), viajes = n()) |>
filter(viajes > 50) |>
mutate(rango_tarifa = case_when(
promedio_tarifa < 15.25 ~ "Mas baratas",
promedio_tarifa >= 35 ~ "Mas caras")) |>
filter(rango_tarifa %in% c('Mas baratas', 'Mas caras')) |>
ggplot() +
geom_col(aes(x = fct_reorder(PUZone, desc(promedio_tarifa)),
y = promedio_tarifa,
fill = promedio_tarifa),
na.rm = T, show.legend = F)+
geom_vline(xintercept = 5.5, linetype = "dashed", size = 0.75) +
scale_fill_gradientn(colors = c('green', 'yellow', "red"))+
coord_flip()+
labs(title = 'Zonas más caras y más baratas para pedir un taxi',
x = '',
y = 'Tarifa promedio')+
dark_mode()
# Hay "zonas premium" donde la tarifa valga más?
taxis |>
group_by(PUZone) |>
summarise(promedio_tarifa = median(total_amount), viajes = n()) |>
filter(viajes > 50) |>
mutate(rango_tarifa = case_when(
promedio_tarifa < 15.25 ~ "Mas baratas",
promedio_tarifa >= 35 ~ "Mas caras")) |>
filter(rango_tarifa %in% c('Mas baratas', 'Mas caras')) |>
ggplot() +
geom_col(aes(x = fct_reorder(PUZone, desc(promedio_tarifa)),
y = promedio_tarifa,
fill = promedio_tarifa),
na.rm = T, show.legend = F)+
geom_vline(xintercept = 5.5, linetype = "dashed", size = 0.75) +
scale_fill_gradientn(colors = c('green', 'yellow', "red"))+
coord_flip()+
labs(title = 'Zonas más caras y más baratas para pedir un taxi',
x = '',
y = 'Tarifa promedio')+
dark_mode()
# Hay barrios con distribuciones mayores o menores de los costos?
ggplot(taxis)+
geom_density(aes(x = total_amount, fill = PUBorough), alpha = 0.5)+
xlim(0, 100)+
labs(title = 'Densidad de precios según el barrio',
x = 'Precio de la tarifa',
y = 'Densidad',
fill = 'Barrio')+
theme_minimal()
# Hay barrios con distribuciones mayores o menores de los costos?
ggplot(taxis)+
geom_density(aes(x = total_amount, fill = PUBorough), alpha = 0.5)+
xlim(0, 100)+
labs(title = 'Densidad de precios según el barrio',
x = 'Precio de la tarifa',
y = 'Densidad',
fill = 'Barrio')+
dark_mode()
# Hay barrios con distribuciones mayores o menores de los costos?
ggplot(taxis)+
geom_density(aes(x = total_amount, fill = PUBorough), alpha = 0.5, color = 'darkgrey')+
xlim(0, 100)+
labs(title = 'Densidad de precios según el barrio',
x = 'Precio de la tarifa',
y = 'Densidad',
fill = 'Barrio')+
dark_mode()
# Hay barrios con distribuciones mayores o menores de los costos?
ggplot(taxis)+
geom_density(aes(x = total_amount, fill = PUBorough), alpha = 0.75, color = 'darkgrey')+
xlim(0, 100)+
labs(title = 'Densidad de precios según el barrio',
x = 'Precio de la tarifa',
y = 'Densidad',
fill = 'Barrio')+
dark_mode()
# Hay barrios con distribuciones mayores o menores de los costos?
ggplot(taxis)+
geom_density(aes(x = total_amount, fill = PUBorough), alpha = 0.75, color = 'darkgrey')+
xlim(0, 100)+
labs(title = 'Densidad de precios según borough',
x = 'Precio de la tarifa',
y = 'Densidad',
fill = 'Barrio')+
dark_mode()
ggplot(costo_por_hora_dias)+
geom_col(aes(x = hora, y = cantidad, fill = costo))+
scale_fill_gradientn(colors = c("darkgreen", "yellow", "red"))+
labs(title = 'Cantidad y costo de viajes por hora',
x = 'Hora del día',
y = 'Cantidad de viajes',
fill = 'Costo promedio del viaje')+
facet_wrap(~es_habil)
taxis_dias = taxis |>
group_by(wday(tpep_pickup_datetime, week_start = 1)) |>
rename(weekday = `wday(tpep_pickup_datetime, week_start = 1)`) |>
mutate(es_habil = ifelse(weekday > 6, 'Fin de semana', 'Dias hábiles')) |>
ungroup()
costo_por_hora_dias = taxis_dias |>
group_by(hour(tpep_pickup_datetime), es_habil) |>
summarise(costo = median(total_amount), cantidad = n()) |>
arrange(desc(costo)) |>
rename(hora = `hour(tpep_pickup_datetime)`)
ggplot(costo_por_hora_dias)+
geom_col(aes(x = hora, y = cantidad, fill = costo))+
scale_fill_gradientn(colors = c("darkgreen", "yellow", "red"))+
labs(title = 'Cantidad y costo de viajes por hora',
x = 'Hora del día',
y = 'Cantidad de viajes',
fill = 'Costo promedio del viaje')+
facet_wrap(~es_habil)
ggplot(costo_por_hora_dias)+
geom_col(aes(x = hora, y = cantidad, fill = costo))+
scale_fill_gradientn(colors = c("darkgreen", "yellow", "red"))+
labs(title = 'Cantidad y costo de viajes por hora',
x = 'Hora del día',
y = 'Cantidad de viajes',
fill = 'Costo promedio del viaje')+
facet_wrap(~es_habil)+
dark_mode()
# Tarifa total en relación a la distancia del viaje
ggplot(taxis)+
geom_point(aes(x = trip_distance,
y = total_amount,
color = PUBorough),
alpha = 0.5,
na.rm = TRUE)+
labs(title = 'Distribución del precio por viaje según la distancia',
x = 'Distancia del viaje [millas]',
y = 'Tarifa [U$S]',
color = 'Zona de salida')+
ylim(0, 300)+
xlim(0, 50)+
theme_minimal()+
facet_wrap(~PUBorough)
# La duración del viaje afecta a la tarifa según la distancia?
taxis |>
filter(trip_duration < 120 & trip_duration > 0) |>
ggplot()+
geom_point(aes(x = trip_distance,
y = total_amount,
color = trip_duration),
alpha = 0.5,
na.rm = TRUE)+
scale_color_gradientn(colors = c('orange', 'red', "purple"))+
labs(title = 'Distribución del precio por viaje según la distancia',
x = 'Distancia del viaje [millas]',
y = 'Tarifa [U$S]',
color = 'Duración del viaje')+
ylim(0, 300)+
xlim(0, 50)+
theme_minimal()
costo_por_hora = taxis |>
group_by(hour(tpep_pickup_datetime)) |>
summarise(costo = median(total_amount), cantidad = n()) |>
arrange(desc(costo)) |>
rename(hora = `hour(tpep_pickup_datetime)`)
# Entendiendo el costo por hora y la cantidad de viajes
ggplot(costo_por_hora)+
geom_col(aes(x = hora, y = cantidad, fill = costo))+
scale_fill_gradientn(colors = c("darkgreen", "yellow", "red"))+
labs(title = 'Densidad de viajes por hora',
x = 'Hora del día',
y = 'Cantidad de viajes',
fill = 'Costo promedio del viaje')+
dark_mode()
ggplot(taxis, aes(x = trip_duration,
y = total_amount,
color = trip_distance))+
geom_point(na.rm = T, alpha = 0.5)+
labs(title = 'Distribución del precio por viaje según la duración',
x = 'Duración del viaje [minutos]',
y = 'Tarifa [U$S]',
color = 'Distancia [millas]')+
scale_color_gradientn(colors = c("darkgreen", "yellow", "red"))+
dark_mode()
# Hay "zonas premium" donde la tarifa valga más?
taxis |>
group_by(PUZone) |>
summarise(promedio_tarifa = median(total_amount), viajes = n()) |>
filter(viajes > 50) |>
mutate(rango_tarifa = case_when(
promedio_tarifa < 15.25 ~ "Mas baratas",
promedio_tarifa >= 35 ~ "Mas caras")) |>
filter(rango_tarifa %in% c('Mas baratas', 'Mas caras')) |>
ggplot() +
geom_col(aes(x = fct_reorder(PUZone, desc(promedio_tarifa)),
y = promedio_tarifa,
fill = promedio_tarifa),
na.rm = T, show.legend = F)+
geom_vline(xintercept = 5.5, linetype = "dashed", size = 0.75) +
scale_fill_gradientn(colors = c('green', 'yellow', "red"))+
coord_flip()+
labs(title = 'Zonas más caras y más baratas para pedir un taxi',
x = '',
y = 'Tarifa promedio')+
dark_mode()
# Hay barrios con distribuciones mayores o menores de los costos?
ggplot(taxis)+
geom_density(aes(x = total_amount, fill = PUBorough), alpha = 0.75, color = 'darkgrey')+
xlim(0, 100)+
labs(title = 'Densidad de precios según borough',
x = 'Precio de la tarifa',
y = 'Densidad',
fill = 'Barrio')+
dark_mode()
# Hay barrios con distribuciones mayores o menores de los costos?
ggplot(taxis)+
geom_density(aes(x = total_amount, fill = PUBorough), alpha = 0.75, color = 'black')+
xlim(0, 100)+
labs(title = 'Densidad de precios según borough',
x = 'Precio de la tarifa',
y = 'Densidad',
fill = 'Barrio')+
dark_mode()
# Tarifa total en relación a la distancia del viaje
ggplot(taxis)+
geom_point(aes(x = trip_distance,
y = total_amount,
color = PUBorough),
size = 0.5,
alpha = 0.5,
na.rm = TRUE)+
labs(title = 'Distribución del precio por viaje según la distancia',
x = 'Distancia del viaje [millas]',
y = 'Tarifa [U$S]',
color = 'Barrio')+
#xlim(0, 30)+
scale_color_manual(values = c('#094D92', '#F46036', '#32E875'))+
theme_minimal()+
dark_mode()
# Promedio de precio por hora
costo_por_hora = taxis |>
group_by(hour(tpep_pickup_datetime)) |>
summarise(costo = median(total_amount), cantidad = n()) |>
arrange(desc(costo)) |>
rename(hora = `hour(tpep_pickup_datetime)`)
# Promedio de precio por hora
costo_por_hora = taxis |>
group_by(hour(tpep_pickup_datetime)) |>
summarise(costo = median(total_amount), cantidad = n()) |>
arrange(desc(costo)) |>
rename(hora = `hour(tpep_pickup_datetime)`)
# Entendiendo el costo por hora y la cantidad de viajes
ggplot(costo_por_hora)+
geom_col(aes(x = hora, y = cantidad, fill = costo))+
scale_fill_gradientn(colors = c("darkgreen", "yellow", "red"))+
labs(title = 'Densidad de viajes por hora',
x = 'Hora del día',
y = 'Cantidad de viajes',
fill = 'Costo promedio del viaje')+
dark_mode()
# Cómo afecta la duración del viaje a la tarifa final?
ggplot(taxis, aes(x = trip_duration,
y = total_amount,
color = trip_distance))+
geom_point(na.rm = T, alpha = 0.5)+
labs(title = 'Distribución del precio por viaje según la duración',
x = 'Duración del viaje [minutos]',
y = 'Tarifa [U$S]',
color = 'Distancia [millas]')+
scale_color_gradientn(colors = c("darkgreen", "yellow", "red"))+
dark_mode()
# Hay "zonas premium" donde la tarifa valga más?
taxis |>
group_by(PUZone) |>
summarise(promedio_tarifa = median(total_amount), viajes = n()) |>
filter(viajes > 50) |>
mutate(rango_tarifa = case_when(
promedio_tarifa < 15.25 ~ "Mas baratas",
promedio_tarifa >= 35 ~ "Mas caras")) |>
filter(rango_tarifa %in% c('Mas baratas', 'Mas caras')) |>
ggplot() +
geom_col(aes(x = fct_reorder(PUZone, desc(promedio_tarifa)),
y = promedio_tarifa,
fill = promedio_tarifa),
na.rm = T, show.legend = F)+
geom_vline(xintercept = 5.5, linetype = "dashed", size = 0.75) +
scale_fill_gradientn(colors = c('green', 'yellow', "red"))+
coord_flip()+
labs(title = 'Zonas más caras y más baratas para pedir un taxi',
x = '',
y = 'Tarifa promedio')+
dark_mode()
# Analizando precios en dias habiles vs fin de semana
taxis_dias = taxis |>
group_by(wday(tpep_pickup_datetime, week_start = 1)) |>
rename(weekday = `wday(tpep_pickup_datetime, week_start = 1)`) |>
mutate(es_habil = ifelse(weekday > 6, 'Fin de semana', 'Dias hábiles')) |>
ungroup()
costo_por_hora_dias = taxis_dias |>
group_by(hour(tpep_pickup_datetime), es_habil) |>
summarise(costo = median(total_amount), cantidad = n()) |>
arrange(desc(costo)) |>
rename(hora = `hour(tpep_pickup_datetime)`)
ggplot(costo_por_hora_dias)+
geom_col(aes(x = hora, y = cantidad, fill = costo))+
scale_fill_gradientn(colors = c("darkgreen", "yellow", "red"))+
labs(title = 'Cantidad y costo de viajes por hora',
x = 'Hora del día',
y = 'Cantidad de viajes',
fill = 'Costo promedio del viaje')+
facet_wrap(~es_habil)+
dark_mode()
# Hay barrios con distribuciones mayores o menores de los costos?
ggplot(taxis)+
geom_density(aes(x = total_amount, fill = PUBorough), alpha = 0.75, color = 'black')+
xlim(0, 100)+
labs(title = 'Densidad de precios según borough',
x = 'Precio de la tarifa',
y = 'Densidad',
fill = 'Barrio')+
dark_mode()
library(tidyverse)
taxis = read_csv('taxis.csv')
taxis = drop_na(taxis)
mod0 = lm(formula = total_amount ~ trip_distance, data = taxis)
summary(mod0)
mod1 = lm(formula = total_amount ~ trip_distance + trip_duration, data = taxis)
summary(mod1)
mod2 = lm(formula = total_amount ~ trip_distance + trip_duration + PUBorough, data = taxis)
summary(mod2)
anova(mod0, mod1, mod2)
taxis = taxis |> mutate(hour = hour(tpep_pickup_datetime))
mod2 = lm(formula = total_amount ~ trip_distance + trip_duration + hour, data = taxis)
summary(mod2)
taxis = read_csv('taxis.csv')
taxis = taxis |> mutate(hour = hour(tpep_pickup_datetime))
View(taxis)
mod2 = lm(formula = total_amount ~ trip_distance + hour, data = taxis)
mod0 = lm(formula = total_amount ~ trip_distance, data = taxis)
summary(mod0)
mod1 = lm(formula = total_amount ~ trip_distance + trip_duration, data = taxis)
summary(mod1)
taxis = taxis |> mutate(hour = hour(tpep_pickup_datetime))
mod2 = lm(formula = total_amount ~ trip_distance + hour, data = taxis)
summary(mod2)
anova(mod0, mod1, mod2)
mod2 = lm(formula = total_amount ~ trip_distance * hour, data = taxis)
summary(mod2)
taxis = taxis |> mutate(hour = as.integer(hour(tpep_pickup_datetime)))
mod2 = lm(formula = total_amount ~ trip_distance * hour, data = taxis)
summary(mod2)
mod2 = lm(formula = total_amount ~ trip_distance * factor(hour), data = taxis)
summary(mod2)
mod0 = lm(formula = total_amount ~ trip_distance, data = taxis)
summary(mod0)
mod3 = lm(formula = total_amount ~ trip_distance * factor(PUBorough), data = taxis)
summary(mod3)
mod3 = lm(formula = total_amount ~ trip_distance + PUBorough, data = taxis)
summary(mod3)
library(arrow)
library(tidyverse)
taxis = read_parquet("yellow_tripdata_2025-03.parquet")
# Mapeos de variables con ID:
#   Compañia (VendorID)
#   Tipo de tarifa (RatecodeID)
#   Tipo de pago (payment_type)
#   Ubicacion de arribo y llegada, por zona (PULocation y DOLoaction)
# Source: https://www.nyc.gov/assets/tlc/downloads/pdf/data_dictionary_trip_records_yellow.pdf
vendor_mapping <- data.frame(
VendorID = c(1, 2, 6, 7),
Vendor = c(
"Creative Mobile Technologies, LLC",
"Curb Mobility, LLC",
"Myle Technologies Inc",
"Helix"
)
)
fare_mapping <- data.frame(
RatecodeID = c(1, 2, 3, 4, 5, 6, 99),
RatecodeDescription = c(
"Standard rate",
"JFK",
"Newark",
"Nassau or Westchester",
"Negotiated fare",
"Group ride",
NA
)
)
payment_mapping <- data.frame(
payment_type = c(0, 1, 2, 3, 4, 5, 6),
payment_description = c(
"Flex Fare trip",
"Credit card",
"Cash",
"No charge",
"Dispute",
NA,
"Voided trip"
)
)
# Left join y elimino NA para todos los mapeos
# Despues elimino las columnas de dirección
taxis = left_join(taxis, vendor_mapping, by = 'VendorID')
taxis = left_join(taxis, fare_mapping, by = 'RatecodeID')
taxis = left_join(taxis, payment_mapping, by = 'payment_type')
taxis = taxis |> select(-VendorID, -RatecodeID, -payment_type)
taxis = taxis |> rename(payment_type = payment_description)
# Referencias de https://d37ci6vzurychx.cloudfront.net/misc/taxi_zone_lookup.csv
# Todas las zonas mapeadas, elimino la zona de servicio (siempre es Yellow)
taxi_zones = read_csv('taxi_zone_lookup.csv')
taxi_zones = taxi_zones |> select(-service_zone)
taxi_zones = taxi_zones |>
mutate(Borough = replace(Borough, Borough %in% c('N/A', 'Unknown'), NA)) |>
mutate(Zone = replace(Zone, Zone %in% c('N/A', 'Unknown'), NA))
taxis = left_join(taxis, taxi_zones, by = join_by('PULocationID' == 'LocationID'))
taxis = left_join(taxis, taxi_zones, by = join_by('DOLocationID' == 'LocationID'))
# Organizando las ubicaciones y limpio los indices
taxis = taxis |> rename(PUBorough = Borough.x,
PUZone = Zone.x,
DOBorough = Borough.y,
DOZone = Zone.y)
taxis = taxis |> select(-PULocationID, -DOLocationID)
# Calculando la duración del viaje restando la llegada
# Limpieza de viajes de duración 0 mins
taxis = taxis |>
mutate(trip_duration = as.integer(difftime(
tpep_dropoff_datetime,
tpep_pickup_datetime,
units = "mins")))
taxis = taxis |> filter(trip_duration > 0)
# Filtro:
#   Viajes entre 0 y 100 millas
#   Tarifa > a U$S 0
#   RatecodeID = 99 (NULL/UNKNOWN) -> NA
#   Evito numero de pasajeros = 0
#   Elimino todas las filas con NA
#   Sampleo en 1/10 n filas
taxis = taxis |>
filter(0 < trip_distance, trip_distance < 40,
0 < trip_duration, trip_duration < 120,
total_amount > 0, total_amount < 200,
passenger_count > 0,
PUBorough %in% c('Manhattan', 'Queens', 'Brooklyn'),
PUBorough == DOBorough)
# Sampleo 400000 observaciones
taxis = taxis  |>
drop_na() |>
sample_n(400000)
# Guardado a .csv
write_csv(taxis, 'taxis.csv')
taxis = read_csv('taxis.csv')
mod3 = lm(formula = total_amount ~ trip_distance + PUBorough, data = taxis)
summary(mod3)
